#!/usr/bin/env node

var PackageStore = require('../lib/private-bower');

var argv = require('optimist').argv;
var colors = require('colors');
var path = require('path');
var http = require('http');

var express = require('express');
var app = express();

var _publicBowerUrl = 'http://bower.herokuapp.com/packages/';

var _port, _persistFilePath, _packageStore;

_init();
function _init() {
    if (argv.h || argv.help) {
        console.log([
            'usage: private-bower [options]',
            '',
            'options:',
            '  -p                 Port to use [5678]',
            '  -o                 Repository persist file [bowerRepository.xml]',
            '  -h --help          Print this list and exit.'
        ].join('\n'));
        process.exit();
    }

    _port = argv.p || argv.port || 5678;
    _persistFilePath = argv.o || argv.output || path.join(__dirname, 'bowerRepository.xml');

    _packageStore = new PackageStore({
        persistFilePath: _persistFilePath
    });

    _initService();
}

function _initService() {
    app.use(express.bodyParser());

    app.post('/registerPackage', function(req, res) {
        _packageStore.registerPackages([ {
            name: req.body.name,
            repo: req.body.repo
        } ]);

        _log('registered package: ' + req.body.name);
        res.send('ok');
    });

    app.post('/registerPackages', function(req, res) {
        _packageStore.registerPackages(req.body.packages);

        _log('registered several packages');
        res.send('ok');
    });

    app.post('/removePackage', function(req, res) {
        _packageStore.removePackages([ req.body.name ]);

        _log('removed package: ' + req.body.name);
        res.send('ok');
    });

    app.post('/removePackages', function(req, res) {
        _packageStore.removePackages(req.body.packages);

        _log('removed packages: ' + req.body.packages.join(', '));
        res.send('ok');
    });

    app.get('/packages', function(req, res) {
        var packages = [];

        for(var packageName in _packageStore.packages) {
            if(_packageStore.packages.hasOwnProperty(packageName)) {
                packages.push({
                    name: packageName,
                    repo: _packageStore.packages[packageName]
                });
            }
        }

        res.send(packages);
    });

    //bower service
    app.get('/packages/:name', function(req, res) {
        var repo = _packageStore.packages[req.params.name];

        if(repo) {
            res.send({
                "name": req.params.name,
                "url": repo,
                "hits": 1
            });
        }
        else {
            _callPublicBower();
        }

        function _callPublicBower() {
            http.get(_publicBowerUrl + req.params.name, function(response) {
                    var body = '';

                    response.on('data', function(chunk) {
                        body += chunk;
                    });

                    response.on('end', function() {
                        if(body.indexOf('Not Found') !== -1) {
                            _notFound();
                        }
                        else {
                            res.send(body);
                        }
                    });
                })
                .on('error', _notFound);
        }

        function _notFound() {
            res.status(404).send('Not found');
        }
    });

    app.listen(_port, function() {
        _log('Bower server started on port ' + _port);
    });
}

function _log(text) {
    console.log('[bower] '.green, text);
}

